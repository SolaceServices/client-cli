#!/usr/bin/env bash
#
# sol Bash Completion
# =======================
#
# Bash completion support for the `sol` command,
# generated by [picocli](http://picocli.info/) version 4.6.1.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `sol [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'sol (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  autoload -U +X compinit && compinit
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_sol finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_sol() {
  local cmds0=(about)
  local cmds1=(account)
  local cmds2=(account)
  local cmds3=(config)
  local cmds4=(config)
  local cmds5=(dc)
  local cmds6=(hammer)
  local cmds7=(hammer)
  local cmds8=(jolt)
  local cmds9=(login)
  local cmds10=(logout)
  local cmds11=(roles)
  local cmds12=(roles)
  local cmds13=(service)
  local cmds14=(service)
  local cmds15=(user)
  local cmds16=(user)
  local cmds17=(version)
  local cmds18=(version)
  local cmds19=(help)
  local cmds20=(account list)
  local cmds21=(account switch)
  local cmds22=(account switch)
  local cmds23=(account list)
  local cmds24=(account switch)
  local cmds25=(account switch)
  local cmds26=(dc list)
  local cmds27=(hammer callCli)
  local cmds28=(hammer cliToSemp)
  local cmds29=(hammer sperf)
  local cmds30=(hammer scurl)
  local cmds31=(hammer callCli)
  local cmds32=(hammer cliToSemp)
  local cmds33=(hammer sperf)
  local cmds34=(hammer scurl)
  local cmds35=(service bridge)
  local cmds36=(service ca)
  local cmds37=(service create)
  local cmds38=(service classes)
  local cmds39=(service cp)
  local cmds40=(service config)
  local cmds41=(service delete)
  local cmds42=(service details)
  local cmds43=(service list)
  local cmds44=(service log)
  local cmds45=(service queue)
  local cmds46=(service set)
  local cmds47=(service types)
  local cmds48=(service username)
  local cmds49=(service bridge create)
  local cmds50=(service bridge delete)
  local cmds51=(service bridge list)
  local cmds52=(service ca add)
  local cmds53=(service ca delete)
  local cmds54=(service ca list)
  local cmds55=(service cp create)
  local cmds56=(service cp delete)
  local cmds57=(service cp details)
  local cmds58=(service cp list)
  local cmds59=(service config backup)
  local cmds60=(service config restore)
  local cmds61=(service queue copy)
  local cmds62=(service queue create)
  local cmds63=(service queue delete)
  local cmds64=(service queue details)
  local cmds65=(service queue list)
  local cmds66=(service queue purge)
  local cmds67=(service queue stats)
  local cmds68=(service username create)
  local cmds69=(service bridge)
  local cmds70=(service ca)
  local cmds71=(service create)
  local cmds72=(service classes)
  local cmds73=(service cp)
  local cmds74=(service config)
  local cmds75=(service delete)
  local cmds76=(service details)
  local cmds77=(service list)
  local cmds78=(service log)
  local cmds79=(service queue)
  local cmds80=(service set)
  local cmds81=(service types)
  local cmds82=(service username)
  local cmds83=(service bridge create)
  local cmds84=(service bridge delete)
  local cmds85=(service bridge list)
  local cmds86=(service ca add)
  local cmds87=(service ca delete)
  local cmds88=(service ca list)
  local cmds89=(service cp create)
  local cmds90=(service cp delete)
  local cmds91=(service cp details)
  local cmds92=(service cp list)
  local cmds93=(service config backup)
  local cmds94=(service config restore)
  local cmds95=(service queue copy)
  local cmds96=(service queue create)
  local cmds97=(service queue delete)
  local cmds98=(service queue details)
  local cmds99=(service queue list)
  local cmds100=(service queue purge)
  local cmds101=(service queue stats)
  local cmds102=(service username create)
  local cmds103=(user create)
  local cmds104=(user delete)
  local cmds105=(user list)
  local cmds106=(user roles)
  local cmds107=(user roles)
  local cmds108=(user create)
  local cmds109=(user delete)
  local cmds110=(user list)
  local cmds111=(user roles)
  local cmds112=(user roles)

  if CompWordsContainsArray "${cmds112[@]}"; then _picocli_sol_user_r; return $?; fi
  if CompWordsContainsArray "${cmds111[@]}"; then _picocli_sol_user_roles; return $?; fi
  if CompWordsContainsArray "${cmds110[@]}"; then _picocli_sol_user_list; return $?; fi
  if CompWordsContainsArray "${cmds109[@]}"; then _picocli_sol_user_delete; return $?; fi
  if CompWordsContainsArray "${cmds108[@]}"; then _picocli_sol_user_create; return $?; fi
  if CompWordsContainsArray "${cmds107[@]}"; then _picocli_sol_user_r; return $?; fi
  if CompWordsContainsArray "${cmds106[@]}"; then _picocli_sol_user_roles; return $?; fi
  if CompWordsContainsArray "${cmds105[@]}"; then _picocli_sol_user_list; return $?; fi
  if CompWordsContainsArray "${cmds104[@]}"; then _picocli_sol_user_delete; return $?; fi
  if CompWordsContainsArray "${cmds103[@]}"; then _picocli_sol_user_create; return $?; fi
  if CompWordsContainsArray "${cmds102[@]}"; then _picocli_sol_service_username_create; return $?; fi
  if CompWordsContainsArray "${cmds101[@]}"; then _picocli_sol_service_queue_stats; return $?; fi
  if CompWordsContainsArray "${cmds100[@]}"; then _picocli_sol_service_queue_purge; return $?; fi
  if CompWordsContainsArray "${cmds99[@]}"; then _picocli_sol_service_queue_list; return $?; fi
  if CompWordsContainsArray "${cmds98[@]}"; then _picocli_sol_service_queue_details; return $?; fi
  if CompWordsContainsArray "${cmds97[@]}"; then _picocli_sol_service_queue_delete; return $?; fi
  if CompWordsContainsArray "${cmds96[@]}"; then _picocli_sol_service_queue_create; return $?; fi
  if CompWordsContainsArray "${cmds95[@]}"; then _picocli_sol_service_queue_copy; return $?; fi
  if CompWordsContainsArray "${cmds94[@]}"; then _picocli_sol_service_config_restore; return $?; fi
  if CompWordsContainsArray "${cmds93[@]}"; then _picocli_sol_service_config_backup; return $?; fi
  if CompWordsContainsArray "${cmds92[@]}"; then _picocli_sol_service_cp_list; return $?; fi
  if CompWordsContainsArray "${cmds91[@]}"; then _picocli_sol_service_cp_details; return $?; fi
  if CompWordsContainsArray "${cmds90[@]}"; then _picocli_sol_service_cp_delete; return $?; fi
  if CompWordsContainsArray "${cmds89[@]}"; then _picocli_sol_service_cp_create; return $?; fi
  if CompWordsContainsArray "${cmds88[@]}"; then _picocli_sol_service_ca_list; return $?; fi
  if CompWordsContainsArray "${cmds87[@]}"; then _picocli_sol_service_ca_delete; return $?; fi
  if CompWordsContainsArray "${cmds86[@]}"; then _picocli_sol_service_ca_add; return $?; fi
  if CompWordsContainsArray "${cmds85[@]}"; then _picocli_sol_service_bridge_list; return $?; fi
  if CompWordsContainsArray "${cmds84[@]}"; then _picocli_sol_service_bridge_delete; return $?; fi
  if CompWordsContainsArray "${cmds83[@]}"; then _picocli_sol_service_bridge_create; return $?; fi
  if CompWordsContainsArray "${cmds82[@]}"; then _picocli_sol_service_username; return $?; fi
  if CompWordsContainsArray "${cmds81[@]}"; then _picocli_sol_service_types; return $?; fi
  if CompWordsContainsArray "${cmds80[@]}"; then _picocli_sol_service_set; return $?; fi
  if CompWordsContainsArray "${cmds79[@]}"; then _picocli_sol_service_queue; return $?; fi
  if CompWordsContainsArray "${cmds78[@]}"; then _picocli_sol_service_log; return $?; fi
  if CompWordsContainsArray "${cmds77[@]}"; then _picocli_sol_service_list; return $?; fi
  if CompWordsContainsArray "${cmds76[@]}"; then _picocli_sol_service_details; return $?; fi
  if CompWordsContainsArray "${cmds75[@]}"; then _picocli_sol_service_delete; return $?; fi
  if CompWordsContainsArray "${cmds74[@]}"; then _picocli_sol_service_config; return $?; fi
  if CompWordsContainsArray "${cmds73[@]}"; then _picocli_sol_service_cp; return $?; fi
  if CompWordsContainsArray "${cmds72[@]}"; then _picocli_sol_service_classes; return $?; fi
  if CompWordsContainsArray "${cmds71[@]}"; then _picocli_sol_service_create; return $?; fi
  if CompWordsContainsArray "${cmds70[@]}"; then _picocli_sol_service_ca; return $?; fi
  if CompWordsContainsArray "${cmds69[@]}"; then _picocli_sol_service_bridge; return $?; fi
  if CompWordsContainsArray "${cmds68[@]}"; then _picocli_sol_service_username_create; return $?; fi
  if CompWordsContainsArray "${cmds67[@]}"; then _picocli_sol_service_queue_stats; return $?; fi
  if CompWordsContainsArray "${cmds66[@]}"; then _picocli_sol_service_queue_purge; return $?; fi
  if CompWordsContainsArray "${cmds65[@]}"; then _picocli_sol_service_queue_list; return $?; fi
  if CompWordsContainsArray "${cmds64[@]}"; then _picocli_sol_service_queue_details; return $?; fi
  if CompWordsContainsArray "${cmds63[@]}"; then _picocli_sol_service_queue_delete; return $?; fi
  if CompWordsContainsArray "${cmds62[@]}"; then _picocli_sol_service_queue_create; return $?; fi
  if CompWordsContainsArray "${cmds61[@]}"; then _picocli_sol_service_queue_copy; return $?; fi
  if CompWordsContainsArray "${cmds60[@]}"; then _picocli_sol_service_config_restore; return $?; fi
  if CompWordsContainsArray "${cmds59[@]}"; then _picocli_sol_service_config_backup; return $?; fi
  if CompWordsContainsArray "${cmds58[@]}"; then _picocli_sol_service_cp_list; return $?; fi
  if CompWordsContainsArray "${cmds57[@]}"; then _picocli_sol_service_cp_details; return $?; fi
  if CompWordsContainsArray "${cmds56[@]}"; then _picocli_sol_service_cp_delete; return $?; fi
  if CompWordsContainsArray "${cmds55[@]}"; then _picocli_sol_service_cp_create; return $?; fi
  if CompWordsContainsArray "${cmds54[@]}"; then _picocli_sol_service_ca_list; return $?; fi
  if CompWordsContainsArray "${cmds53[@]}"; then _picocli_sol_service_ca_delete; return $?; fi
  if CompWordsContainsArray "${cmds52[@]}"; then _picocli_sol_service_ca_add; return $?; fi
  if CompWordsContainsArray "${cmds51[@]}"; then _picocli_sol_service_bridge_list; return $?; fi
  if CompWordsContainsArray "${cmds50[@]}"; then _picocli_sol_service_bridge_delete; return $?; fi
  if CompWordsContainsArray "${cmds49[@]}"; then _picocli_sol_service_bridge_create; return $?; fi
  if CompWordsContainsArray "${cmds48[@]}"; then _picocli_sol_service_username; return $?; fi
  if CompWordsContainsArray "${cmds47[@]}"; then _picocli_sol_service_types; return $?; fi
  if CompWordsContainsArray "${cmds46[@]}"; then _picocli_sol_service_set; return $?; fi
  if CompWordsContainsArray "${cmds45[@]}"; then _picocli_sol_service_queue; return $?; fi
  if CompWordsContainsArray "${cmds44[@]}"; then _picocli_sol_service_log; return $?; fi
  if CompWordsContainsArray "${cmds43[@]}"; then _picocli_sol_service_list; return $?; fi
  if CompWordsContainsArray "${cmds42[@]}"; then _picocli_sol_service_details; return $?; fi
  if CompWordsContainsArray "${cmds41[@]}"; then _picocli_sol_service_delete; return $?; fi
  if CompWordsContainsArray "${cmds40[@]}"; then _picocli_sol_service_config; return $?; fi
  if CompWordsContainsArray "${cmds39[@]}"; then _picocli_sol_service_cp; return $?; fi
  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_sol_service_classes; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_sol_service_create; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_sol_service_ca; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_sol_service_bridge; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_sol_hammer_scurl; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_sol_hammer_sperf; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_sol_hammer_cliToSemp; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_sol_hammer_callCli; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_sol_hammer_scurl; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_sol_hammer_sperf; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_sol_hammer_cliToSemp; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_sol_hammer_callCli; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_sol_dc_list; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_sol_account_s; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_sol_account_switch; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_sol_account_list; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_sol_account_s; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_sol_account_switch; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_sol_account_list; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_sol_help; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_sol_v; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_sol_version; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_sol_u; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_sol_user; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_sol_s; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_sol_service; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_sol_r; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_sol_roles; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_sol_logout; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_sol_login; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_sol_jolt; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_sol_h; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_sol_hammer; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_sol_dc; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_sol_c; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_sol_config; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_sol_a; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_sol_account; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_sol_about; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_sol; return $?;
}

# Generates completions for the options and subcommands of the `sol` command.
function _picocli_sol() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="about account a config c dc hammer h jolt login logout roles r service s user u version -v help"
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `about` subcommand.
function _picocli_sol_about() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `account` subcommand.
function _picocli_sol_account() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list switch s"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `a` subcommand.
function _picocli_sol_a() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list switch s"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_sol_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e -encrypted -p -prompt -r -reset -l -load -d -delete -s -save -c -cliToSemp -perl -h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `c` subcommand.
function _picocli_sol_c() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-e -encrypted -p -prompt -r -reset -l -load -d -delete -s -save -c -cliToSemp -perl -h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dc` subcommand.
function _picocli_sol_dc() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list"
  local flag_opts="h help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `hammer` subcommand.
function _picocli_sol_hammer() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="callCli cliToSemp sperf scurl"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `h` subcommand.
function _picocli_sol_h() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="callCli cliToSemp sperf scurl"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `jolt` subcommand.
function _picocli_sol_jolt() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_sol_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-s -h -help"
  local arg_opts="-u -username -p -password -o -org -t -token"

  compopt +o default

  case ${prev_word} in
    -u|-username)
      return
      ;;
    -p|-password)
      return
      ;;
    -o|-org)
      return
      ;;
    -t|-token)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logout` subcommand.
function _picocli_sol_logout() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help -c -clean"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `roles` subcommand.
function _picocli_sol_roles() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `r` subcommand.
function _picocli_sol_r() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `service` subcommand.
function _picocli_sol_service() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="bridge ca create classes cp config delete details list log queue set types username"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `s` subcommand.
function _picocli_sol_s() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="bridge ca create classes cp config delete details list log queue set types username"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `user` subcommand.
function _picocli_sol_user() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete list roles r"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `u` subcommand.
function _picocli_sol_u() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete list roles r"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `version` subcommand.
function _picocli_sol_version() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `-v` subcommand.
function _picocli_sol_v() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_sol_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_account_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `switch` subcommand.
function _picocli_sol_account_switch() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `s` subcommand.
function _picocli_sol_account_s() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_account_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `switch` subcommand.
function _picocli_sol_account_switch() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `s` subcommand.
function _picocli_sol_account_s() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_dc_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `callCli` subcommand.
function _picocli_sol_hammer_callCli() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cliToSemp` subcommand.
function _picocli_sol_hammer_cliToSemp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sperf` subcommand.
function _picocli_sol_hammer_sperf() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -s -space -ss -secured"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scurl` subcommand.
function _picocli_sol_hammer_scurl() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -i -insecure"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `callCli` subcommand.
function _picocli_sol_hammer_callCli() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cliToSemp` subcommand.
function _picocli_sol_hammer_cliToSemp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sperf` subcommand.
function _picocli_sol_hammer_sperf() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -s -space -ss -secured"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scurl` subcommand.
function _picocli_sol_hammer_scurl() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -i -insecure"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `bridge` subcommand.
function _picocli_sol_service_bridge() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete list"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ca` subcommand.
function _picocli_sol_service_ca() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add delete list"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -dc -type -class"

  compopt +o default

  case ${prev_word} in
    -serviceName)
      return
      ;;
    -dc)
      return
      ;;
    -type)
      return
      ;;
    -class)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `classes` subcommand.
function _picocli_sol_service_classes() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cp` subcommand.
function _picocli_sol_service_cp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete details list"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_sol_service_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="backup restore"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `details` subcommand.
function _picocli_sol_service_details() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -mine"
  local arg_opts="-fn -filterName"

  compopt +o default

  case ${prev_word} in
    -fn|-filterName)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `log` subcommand.
function _picocli_sol_service_log() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac
  local logType_pos_param_args="debug system rest event command" # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "log" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compgen -W "$logType_pos_param_args" -- "${curr_word}" )
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `queue` subcommand.
function _picocli_sol_service_queue() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="copy create delete details list purge stats"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_sol_service_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-n -none -h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `types` subcommand.
function _picocli_sol_service_types() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `username` subcommand.
function _picocli_sol_service_username() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_bridge_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -r -rollback -c -cert"
  local arg_opts="-localServiceName -ln -localServiceId -lid -remoteServiceName -rn -remoteServiceId -rid -s -lu -localUsername -lp -localPassword -ltcn -localTcn -ru -remoteUsername -rp -remotePassword -rtcn -remoteTcn"

  compopt +o default

  case ${prev_word} in
    -localServiceName|-ln)
      return
      ;;
    -localServiceId|-lid)
      return
      ;;
    -remoteServiceName|-rn)
      return
      ;;
    -remoteServiceId|-rid)
      return
      ;;
    -s)
      return
      ;;
    -lu|-localUsername)
      return
      ;;
    -lp|-localPassword)
      return
      ;;
    -ltcn|-localTcn)
      return
      ;;
    -ru|-remoteUsername)
      return
      ;;
    -rp|-remotePassword)
      return
      ;;
    -rtcn|-remoteTcn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_bridge_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-localServiceName -ln -localServiceId -lid -remoteServiceName -rn -remoteServiceId -rid"

  compopt +o default

  case ${prev_word} in
    -localServiceName|-ln)
      return
      ;;
    -localServiceId|-lid)
      return
      ;;
    -remoteServiceName|-rn)
      return
      ;;
    -remoteServiceId|-rid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_bridge_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_sol_service_ca_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_ca_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_ca_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_cp_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_cp_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `details` subcommand.
function _picocli_sol_service_cp_details() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_cp_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `backup` subcommand.
function _picocli_sol_service_config_backup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -d -default -k --insecure"
  local arg_opts="-serviceName -sn -serviceId -sid -o -opaquePassword --cacert"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    -o|-opaquePassword)
      return
      ;;
    --cacert)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `restore` subcommand.
function _picocli_sol_service_config_restore() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -k --insecure"
  local arg_opts="-serviceName -sn -serviceId -sid --cacert"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    --cacert)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "restore" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `copy` subcommand.
function _picocli_sol_service_queue_copy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -s -secure -r -remove -dmq"
  local arg_opts="-localServiceName -ln -localServiceId -lid -remoteServiceName -rn -remoteServiceId -rid -lq -localQueue -lu -localUsername -lp -localPassword -rq -remoteQueue -ru -remoteUsername -rp -remotePassword -mn -messageNumber -ttl"

  compopt +o default

  case ${prev_word} in
    -localServiceName|-ln)
      return
      ;;
    -localServiceId|-lid)
      return
      ;;
    -remoteServiceName|-rn)
      return
      ;;
    -remoteServiceId|-rid)
      return
      ;;
    -lq|-localQueue)
      return
      ;;
    -lu|-localUsername)
      return
      ;;
    -lp|-localPassword)
      return
      ;;
    -rq|-remoteQueue)
      return
      ;;
    -ru|-remoteUsername)
      return
      ;;
    -rp|-remotePassword)
      return
      ;;
    -mn|-messageNumber)
      return
      ;;
    -ttl)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_queue_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -e -exclusive -rt -respectTtl"
  local arg_opts="-serviceName -sn -serviceId -sid -mt -maxTtl -q -quota -dmq"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    -mt|-maxTtl)
      return
      ;;
    -q|-quota)
      return
      ;;
    -dmq)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_queue_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `details` subcommand.
function _picocli_sol_service_queue_details() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_queue_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `purge` subcommand.
function _picocli_sol_service_queue_purge() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stats` subcommand.
function _picocli_sol_service_queue_stats() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_username_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -sm -subscriptionmanager -gp -guaranteedpermission -e -enabled"
  local arg_opts="-serviceName -sn -serviceId -sid -p -password -cp -clientprofile -acl -aclprofile"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    -p|-password)
      return
      ;;
    -cp|-clientprofile)
      return
      ;;
    -acl|-aclprofile)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `bridge` subcommand.
function _picocli_sol_service_bridge() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete list"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ca` subcommand.
function _picocli_sol_service_ca() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add delete list"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -dc -type -class"

  compopt +o default

  case ${prev_word} in
    -serviceName)
      return
      ;;
    -dc)
      return
      ;;
    -type)
      return
      ;;
    -class)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `classes` subcommand.
function _picocli_sol_service_classes() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cp` subcommand.
function _picocli_sol_service_cp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create delete details list"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_sol_service_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="backup restore"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `details` subcommand.
function _picocli_sol_service_details() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -mine"
  local arg_opts="-fn -filterName"

  compopt +o default

  case ${prev_word} in
    -fn|-filterName)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `log` subcommand.
function _picocli_sol_service_log() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac
  local logType_pos_param_args="debug system rest event command" # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "log" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compgen -W "$logType_pos_param_args" -- "${curr_word}" )
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `queue` subcommand.
function _picocli_sol_service_queue() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="copy create delete details list purge stats"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_sol_service_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-n -none -h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `types` subcommand.
function _picocli_sol_service_types() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `username` subcommand.
function _picocli_sol_service_username() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create"
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_bridge_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -r -rollback -c -cert"
  local arg_opts="-localServiceName -ln -localServiceId -lid -remoteServiceName -rn -remoteServiceId -rid -s -lu -localUsername -lp -localPassword -ltcn -localTcn -ru -remoteUsername -rp -remotePassword -rtcn -remoteTcn"

  compopt +o default

  case ${prev_word} in
    -localServiceName|-ln)
      return
      ;;
    -localServiceId|-lid)
      return
      ;;
    -remoteServiceName|-rn)
      return
      ;;
    -remoteServiceId|-rid)
      return
      ;;
    -s)
      return
      ;;
    -lu|-localUsername)
      return
      ;;
    -lp|-localPassword)
      return
      ;;
    -ltcn|-localTcn)
      return
      ;;
    -ru|-remoteUsername)
      return
      ;;
    -rp|-remotePassword)
      return
      ;;
    -rtcn|-remoteTcn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_bridge_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-localServiceName -ln -localServiceId -lid -remoteServiceName -rn -remoteServiceId -rid"

  compopt +o default

  case ${prev_word} in
    -localServiceName|-ln)
      return
      ;;
    -localServiceId|-lid)
      return
      ;;
    -remoteServiceName|-rn)
      return
      ;;
    -remoteServiceId|-rid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_bridge_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_sol_service_ca_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_ca_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_ca_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_cp_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_cp_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `details` subcommand.
function _picocli_sol_service_cp_details() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_cp_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `backup` subcommand.
function _picocli_sol_service_config_backup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -d -default -k --insecure"
  local arg_opts="-serviceName -sn -serviceId -sid -o -opaquePassword --cacert"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    -o|-opaquePassword)
      return
      ;;
    --cacert)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `restore` subcommand.
function _picocli_sol_service_config_restore() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -k --insecure"
  local arg_opts="-serviceName -sn -serviceId -sid --cacert"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    --cacert)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "restore" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `copy` subcommand.
function _picocli_sol_service_queue_copy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -s -secure -r -remove -dmq"
  local arg_opts="-localServiceName -ln -localServiceId -lid -remoteServiceName -rn -remoteServiceId -rid -lq -localQueue -lu -localUsername -lp -localPassword -rq -remoteQueue -ru -remoteUsername -rp -remotePassword -mn -messageNumber -ttl"

  compopt +o default

  case ${prev_word} in
    -localServiceName|-ln)
      return
      ;;
    -localServiceId|-lid)
      return
      ;;
    -remoteServiceName|-rn)
      return
      ;;
    -remoteServiceId|-rid)
      return
      ;;
    -lq|-localQueue)
      return
      ;;
    -lu|-localUsername)
      return
      ;;
    -lp|-localPassword)
      return
      ;;
    -rq|-remoteQueue)
      return
      ;;
    -ru|-remoteUsername)
      return
      ;;
    -rp|-remotePassword)
      return
      ;;
    -mn|-messageNumber)
      return
      ;;
    -ttl)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_queue_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -e -exclusive -rt -respectTtl"
  local arg_opts="-serviceName -sn -serviceId -sid -mt -maxTtl -q -quota -dmq"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    -mt|-maxTtl)
      return
      ;;
    -q|-quota)
      return
      ;;
    -dmq)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_service_queue_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `details` subcommand.
function _picocli_sol_service_queue_details() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_service_queue_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `purge` subcommand.
function _picocli_sol_service_queue_purge() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stats` subcommand.
function _picocli_sol_service_queue_stats() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts="-serviceName -sn -serviceId -sid"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_service_username_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h -help -sm -subscriptionmanager -gp -guaranteedpermission -e -enabled"
  local arg_opts="-serviceName -sn -serviceId -sid -p -password -cp -clientprofile -acl -aclprofile"

  compopt +o default

  case ${prev_word} in
    -serviceName|-sn)
      return
      ;;
    -serviceId|-sid)
      return
      ;;
    -p|-password)
      return
      ;;
    -cp|-clientprofile)
      return
      ;;
    -acl|-aclprofile)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_user_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_user_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_user_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `roles` subcommand.
function _picocli_sol_user_roles() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `r` subcommand.
function _picocli_sol_user_r() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_sol_user_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_sol_user_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_sol_user_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `roles` subcommand.
function _picocli_sol_user_roles() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `r` subcommand.
function _picocli_sol_user_r() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h -help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `sol`, `sol.sh`, and `sol.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_sol` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_sol -o default sol sol.sh sol.bash
